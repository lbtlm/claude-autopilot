# 零源码泄露的多阶段Dockerfile - Gin微服务
# 构建阶段 - 包含源码，不会进入最终镜像
FROM golang:1.24-alpine AS builder

# 安装必要的构建工具
RUN apk add --no-cache git ca-certificates tzdata

# 设置工作目录
WORKDIR /build

# 只复制go.mod和go.sum，利用Docker缓存
COPY go.mod go.sum ./
RUN go mod download

# 复制源码进行构建
COPY . .

# 构建静态链接的二进制文件
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 \
    go build -a -installsuffix cgo \
    -ldflags '-extldflags "-static" -s -w -X main.Version=$(git describe --tags --always --dirty 2>/dev/null || echo "dev") -X main.BuildTime=$(date +%Y-%m-%d_%H:%M:%S)' \
    -o app cmd/server/main.go

# 运行阶段 - 零源码，最小化镜像
FROM scratch

# 复制时区信息和CA证书
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# 只复制编译后的二进制文件
COPY --from=builder /build/app /app

# 环境变量配置（可通过docker run -e 覆盖）
ENV HOST=0.0.0.0
ENV PORT=8080

# 动态暴露端口（通过环境变量）
EXPOSE $PORT

# 健康检查（使用环境变量）
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD ["/app", "--health-check"] || exit 1

# 启动应用
ENTRYPOINT ["/app"]