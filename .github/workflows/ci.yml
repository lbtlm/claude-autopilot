name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  lint:
    name: Lint Shell Scripts
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install ShellCheck
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck
        
    - name: Run ShellCheck
      run: |
        # Run ShellCheck with relaxed settings (ignore specific warnings)
        find . -name "*.sh" -type f | xargs shellcheck -e SC2155,SC2034,SC1090,SC2199,SC2046,SC2038,SC1091,SC2221,SC2222,SC2076,SC2164,SC2087,SC2184 -S error
        
  test:
    name: Test Project Types
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up test environment
      run: |
        chmod +x bin/setup.sh
        chmod +x bin/claude-autopilot
        chmod +x tests/run-tests.sh
        
    - name: Test basic functionality
      run: |
        ./bin/claude-autopilot --version || echo "Version command not yet implemented"
        ./bin/claude-autopilot --help || echo "Help command not yet implemented"
        
    - name: Test project type detection
      run: |
        # Test project type templates exist (new GNU standard structure)
        test -f share/claude-autopilot/project-types/go-general.md
        test -f share/claude-autopilot/project-types/vue3-frontend.md
        test -f share/claude-autopilot/project-types/python-web.md || test -f share/claude-autopilot/project-types/fastapi_vue3.md
        test -f share/claude-autopilot/project-types/bash-scripts.md
        
    - name: Run test suite
      run: |
        # Run the new test framework
        ./tests/run-tests.sh
        
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for sensitive information
      run: |
        # Check for potential sensitive information (actual credentials, not code patterns)
        if grep -r -E "(password|passwd|secret|api_key|access_token).*=.*['\"][a-zA-Z0-9]{20,}['\"]" \
           --exclude-dir=.git \
           --exclude-dir=.github \
           --exclude="*.md" \
           --exclude="*.sh" \
           . 2>/dev/null; then
          echo "⚠️ Found potential sensitive information"
          exit 1
        fi
        echo "✅ No sensitive information found"
        
    - name: Check file permissions
      run: |
        # Check that shell scripts are executable
        find . -name "*.sh" -type f | while read -r file; do
          if [ ! -x "$file" ]; then
            echo "❌ $file is not executable"
            exit 1
          fi
        done
        echo "✅ All shell scripts have correct permissions"