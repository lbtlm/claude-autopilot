#!/bin/bash

# 智能Claude Autopilot 2.1项目注入脚本
# 功能：为项目配置轻量级Claude Autopilot环境，避免文件重复
# 版本：2.0.0 - 增强版本，支持智能项目类型检测

set -e

# 设置编码环境（如果支持的话）
export LANG=${LANG:-C.UTF-8}
if locale -a 2>/dev/null | grep -q "zh_CN.UTF-8"; then
    export LC_ALL=zh_CN.UTF-8
else
    export LC_ALL=C.UTF-8
fi

# 显示使用帮助
show_usage() {
    echo "📖 使用说明:"
    echo "   $0 [--target_dir <路径>] [--project_type <类型>] [--owner <所有者>]"
    echo ""
    echo "📋 参数说明:"
    echo "   --target_dir  - 目标目录 (可选，默认当前目录)"
    echo "                   绝对路径: /path/to/project"
    echo "                   相对路径: my-project (在当前目录下创建)"
    echo "   --project_type - 项目类型 (可选，不提供则交互选择)"
    echo "   --owner       - 项目所有者 (可选，不提供则自动生成)"
    echo ""
    echo "🎯 使用示例:"
    echo "   $0                                    # 完全交互式"
    echo "   $0 --target_dir ./my-app              # 指定目录"
    echo "   $0 --project_type bash-scripts        # 指定类型"
    echo "   $0 --owner 'YoumiSam'                 # 指定所有者"
    echo "   $0 --target_dir /opt/app --project_type gin-microservice --owner 'Team'  # 完整参数"
    echo ""
    echo "🆕 项目模式说明:"
    echo "   - 空目录/不存在目录: 新建项目模式"
    echo "   - 现有Claude项目: 注入更新模式 (保护现有结构)"
    echo "   - 非空非项目目录: 需要用户确认"
    echo ""
    echo "🏷️ 支持的项目类型:"
    echo "   gin-microservice  - Go + Gin微服务"
    echo "   gin-vue3         - Go + Gin + Vue3全栈"
    echo "   go-desktop       - Go桌面应用"
    echo "   go-general       - Go通用项目"
    echo "   vue3-frontend    - Vue3前端项目"
    echo "   vue2-frontend    - Vue2前端项目"
    echo "   react-frontend   - React前端项目"
    echo "   nextjs-frontend  - Next.js前端项目"
    echo "   nodejs-general   - Node.js通用项目"
    echo "   python-desktop   - Python桌面应用"
    echo "   django           - Django Web应用"
    echo "   python-general   - Python通用项目"
    echo "   fastapi_vue3     - FastAPI + Vue3全栈"
    echo "   bash-scripts     - Bash脚本项目"
    echo "   java-maven       - Java Maven项目"
    echo "   java-gradle      - Java Gradle项目"
    echo "   rust-project     - Rust项目"
    echo "   php-project      - PHP项目"
    echo ""
}

# 生成UUID7格式的project_id
generate_uuid7() {
    # UUID7 使用时间戳作为前缀，确保时间顺序性
    # 格式: xxxxxxxx-xxxx-7xxx-yxxx-xxxxxxxxxxxx
    # 其中前48位是毫秒时间戳，版本号为7
    
    # 获取当前时间戳（毫秒）
    if command -v python3 >/dev/null 2>&1; then
        # 使用Python生成更精确的UUID7
        python3 -c "
import time
import random
import uuid

# 获取当前时间戳（毫秒）
timestamp_ms = int(time.time() * 1000)

# 转换为48位十六进制
timestamp_hex = format(timestamp_ms, '012x')

# 生成随机部分
rand_a = random.randint(0, 0xfff)  # 12位随机数
rand_b = random.randint(0, 0x3fff) | 0x8000  # 14位随机数，设置variant位
rand_c = random.randint(0, 0xffffffffffff)  # 48位随机数

# 构造UUID7
uuid7 = f'{timestamp_hex[:8]}-{timestamp_hex[8:]}-7{rand_a:03x}-{rand_b:04x}-{rand_c:012x}'
print(uuid7)
"
    else
        # 回退方案：使用shell生成类似UUID7的格式
        timestamp=$(date +%s%3N)  # 获取毫秒时间戳
        timestamp_hex=$(printf "%012x" $timestamp)
        
        # 生成随机部分
        rand1=$(printf "%03x" $((RANDOM % 4096)))
        rand2=$(printf "%04x" $((RANDOM % 16384 + 32768)))  # 设置variant位
        rand3=$(printf "%012x" $((RANDOM * RANDOM * RANDOM % 281474976710656)))
        
        echo "${timestamp_hex:0:8}-${timestamp_hex:8:4}-7${rand1}-${rand2}-${rand3}"
    fi
}

# 项目状态检测函数
detect_project_status() {
    local target_dir="$1"
    
    # 1. 检查目录是否存在
    if [ ! -d "$target_dir" ]; then
        echo "CREATE_NEW"
        return
    fi
    
    # 2. 检查是否为空目录 (忽略隐藏文件)
    if [ -z "$(find "$target_dir" -maxdepth 1 -not -path "$target_dir" -not -name ".*" -print -quit)" ]; then
        echo "CREATE_NEW"
        return
    fi
    
    # 3. 检查是否为现有项目 (检测项目标识文件)
    if [ -f "$target_dir/CLAUDE.md" ] || [ -f "$target_dir/.claude/project.json" ]; then
        echo "INJECT_EXISTING"
        return
    fi
    
    # 4. 非空非项目目录
    echo "NON_EMPTY_NON_PROJECT"
}

# 验证项目类型有效性
validate_project_type() {
    local project_type="$1"
    local valid_types="gin-microservice gin-vue3 go-desktop go-general vue3-frontend vue2-frontend react-frontend nextjs-frontend nodejs-general python-desktop django python-general fastapi_vue3 bash-scripts java-maven java-gradle rust-project php-project"
    
    echo "$valid_types" | grep -wq "$project_type"
}

# 显示有效项目类型列表
show_valid_project_types() {
    echo "📋 有效的项目类型:"
    echo "   1) gin-microservice    (Go + Gin微服务)"
    echo "   2) gin-vue3           (Go + Gin + Vue3全栈)"
    echo "   3) go-desktop         (Go桌面应用)"
    echo "   4) go-general         (Go通用项目)"
    echo "   5) vue3-frontend      (Vue3前端项目)"
    echo "   6) vue2-frontend      (Vue2前端项目)"
    echo "   7) react-frontend     (React前端项目)"
    echo "   8) nextjs-frontend    (Next.js前端项目)"
    echo "   9) nodejs-general     (Node.js通用项目)"
    echo "   10) python-desktop     (Python桌面应用)"
    echo "   11) django             (Django Web应用)"
    echo "   12) python-general     (Python通用项目)"
    echo "   13) fastapi_vue3       (FastAPI + Vue3全栈)"
    echo "   14) bash-scripts       (Bash脚本项目)"
    echo "   15) java-maven         (Java Maven项目)"
    echo "   16) java-gradle        (Java Gradle项目)"
    echo "   17) rust-project       (Rust项目)"
    echo "   18) php-project        (PHP项目)"
}

# 交互式选择项目类型
interactive_select_project_type() {
    echo ""
    show_valid_project_types
    echo ""
    
    while true; do
        read -r -p "请输入选项编号 (1-18): " choice
        
        case "$choice" in
            1) echo "gin-microservice"; return ;;
            2) echo "gin-vue3"; return ;;
            3) echo "go-desktop"; return ;;
            4) echo "go-general"; return ;;
            5) echo "vue3-frontend"; return ;;
            6) echo "vue2-frontend"; return ;;
            7) echo "react-frontend"; return ;;
            8) echo "nextjs-frontend"; return ;;
            9) echo "nodejs-general"; return ;;
            10) echo "python-desktop"; return ;;
            11) echo "django"; return ;;
            12) echo "python-general"; return ;;
            13) echo "fastapi_vue3"; return ;;
            14) echo "bash-scripts"; return ;;
            15) echo "java-maven"; return ;;
            16) echo "java-gradle"; return ;;
            17) echo "rust-project"; return ;;
            18) echo "php-project"; return ;;
            *)
                echo "❌ 无效选择，请输入 1-18 之间的数字"
                ;;
        esac
    done
}

# 检测技术栈
detect_tech_stack() {
    local path="$1"
    local project_type="$2"
    local tech_stack=""

    case "$project_type" in
        "gin-microservice")
            tech_stack="Go + Gin"
            if [ -f "$path/go.mod" ]; then
                if grep -q "gorm" "$path/go.mod"; then
                    tech_stack="$tech_stack + GORM"
                fi
                if grep -q "redis" "$path/go.mod"; then
                    tech_stack="$tech_stack + Redis"
                fi
            fi
            ;;
        "vue3-frontend")
            tech_stack="Vue3 + TypeScript"
            if [ -f "$path/package.json" ]; then
                if grep -q "vite" "$path/package.json"; then
                    tech_stack="$tech_stack + Vite"
                fi
                if grep -q "pinia" "$path/package.json"; then
                    tech_stack="$tech_stack + Pinia"
                fi
            fi
            ;;
        "python-desktop")
            tech_stack="Python"
            if find "$path" -name "*.py" -exec grep -l "tkinter" {} \; 2>/dev/null | head -1 | grep -q .; then
                tech_stack="$tech_stack + Tkinter"
            fi
            if find "$path" -name "*.py" -exec grep -l "PyQt" {} \; 2>/dev/null | head -1 | grep -q .; then
                tech_stack="$tech_stack + PyQt"
            fi
            ;;
        "bash-scripts")
            tech_stack="bash-scripts"
            if [ -f "$path/Makefile" ]; then
                tech_stack="$tech_stack + Make"
            fi
            if find "$path" -name "*.sh" | grep -q test; then
                tech_stack="$tech_stack + Tests"
            fi
            ;;
        *)
            tech_stack="$project_type"
            ;;
    esac

    echo "$tech_stack"
}

# 加载必要的库函数
load_required_libraries() {
    echo "📚 加载必要的库函数..."
    
    # 检查并加载核心库文件
    local lib_files=(
        "project-health-assessment.sh"
        "project-structure-creator.sh" 
        "deployment-strategy-manager.sh"
        "internationalization-manager.sh"
        "alias-resolver.sh"
    )
    
    for lib_file in "${lib_files[@]}"; do
        local lib_path="$GLOBAL_RULES_PATH/lib/$lib_file"
        if [ -f "$lib_path" ]; then
            echo "   ✅ 加载: $lib_file"
            source "$lib_path" 2>/dev/null || {
                echo "   ⚠️ 警告: 无法加载 $lib_file，跳过"
            }
        else
            echo "   ⚠️ 警告: 未找到 $lib_file，跳过"
        fi
    done
    
    echo "   ✅ 库函数加载完成"
}

echo "🛩️ Claude Autopilot 2.1 智能项目配置器"
echo "================================================"

# 跨平台realpath函数
get_realpath() {
    if command -v realpath >/dev/null 2>&1; then
        realpath "$1"
    else
        # 兼容macOS等没有realpath的系统
        cd "$(dirname "$1")" && echo "$(pwd)/$(basename "$1")"
    fi
}

# 动态检测脚本路径 - 自动获取claude-autopilot根目录
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# 脚本在 bin/ 目录下，所以上级目录就是 claude-autopilot 根目录
CLAUDE_AUTOPILOT_ROOT="$(dirname "$SCRIPT_DIR")"
GLOBAL_RULES_PATH="$CLAUDE_AUTOPILOT_ROOT"
GLOBAL_CE_PATH="$CLAUDE_AUTOPILOT_ROOT/share/claude-autopilot"
SCRIPT_VERSION="2.0.0"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# 导出全局路径变量供子脚本使用
export GLOBAL_RULES_PATH
export GLOBAL_CE_PATH

# 调试信息
echo "🔍 全局路径调试:"
echo "   GLOBAL_RULES_PATH: $GLOBAL_RULES_PATH"
echo "   GLOBAL_CE_PATH: $GLOBAL_CE_PATH"

# 新的参数解析系统
TARGET_DIR=""
PROJECT_TYPE=""
OWNER=""

# 参数解析
while [[ $# -gt 0 ]]; do
    case $1 in
        --target_dir)
            if [ -z "$2" ] || [[ "$2" == --* ]]; then
                echo "❌ 错误: --target_dir 需要提供目录路径"
                exit 1
            fi
            TARGET_DIR="$2"
            shift 2
            ;;
        --project_type)
            if [ -z "$2" ] || [[ "$2" == --* ]]; then
                echo "❌ 错误: --project_type 需要提供项目类型"
                exit 1
            fi
            PROJECT_TYPE="$2"
            shift 2
            ;;
        --owner)
            if [ -z "$2" ] || [[ "$2" == --* ]]; then
                echo "❌ 错误: --owner 需要提供所有者名称"
                exit 1
            fi
            OWNER="$2"
            shift 2
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        -v|--version)
            echo "Claude Autopilot v2.1.0"
            exit 0
            ;;
        *)
            echo "❌ 错误: 未知参数 $1"
            echo ""
            show_usage
            exit 1
            ;;
    esac
done

# 处理target_dir参数
if [ -z "$TARGET_DIR" ]; then
    # 未提供target_dir，使用当前目录
    TARGET_DIR=$(pwd)
    echo "📂 使用当前目录: $TARGET_DIR"
elif [[ "$TARGET_DIR" == /* ]]; then
    # 绝对路径
    echo "📂 使用绝对路径: $TARGET_DIR"
else
    # 相对路径，在当前目录下创建
    TARGET_DIR="$(pwd)/$TARGET_DIR"
    echo "📂 相对路径转换为: $TARGET_DIR"
fi

# 规范化路径
if [ -d "$TARGET_DIR" ]; then
    TARGET_DIR=$(get_realpath "$TARGET_DIR")
fi

echo "📂 最终目标目录: $TARGET_DIR"
echo "🔧 Claude Autopilot路径: $GLOBAL_CE_PATH"
echo ""

# 检测项目状态
echo "🔍 检测项目状态..."
PROJECT_STATUS=$(detect_project_status "$TARGET_DIR")
echo "   状态: $PROJECT_STATUS"
echo ""

# 函数定义：处理CREATE_NEW模式
handle_create_new_mode() {
    echo "🆕 新建项目模式"
    echo "================================================"
    
    # 创建目录（如果不存在）
    if [ ! -d "$TARGET_DIR" ]; then
        echo "📁 创建目录: $TARGET_DIR"
        mkdir -p "$TARGET_DIR" || {
            echo "❌ 错误: 无法创建目录 $TARGET_DIR"
            exit 1
        }
    fi
    
    # 处理项目类型
    if [ -n "$PROJECT_TYPE" ]; then
        if validate_project_type "$PROJECT_TYPE"; then
            echo "✅ 使用指定的项目类型: $PROJECT_TYPE"
            FINAL_PROJECT_TYPE="$PROJECT_TYPE"
        else
            echo "❌ 项目类型 '$PROJECT_TYPE' 无效"
            show_valid_project_types
            echo ""
            echo "请从有效类型中选择:"
            FINAL_PROJECT_TYPE=$(interactive_select_project_type)
        fi
    else
        echo "📋 请选择项目类型:"
        FINAL_PROJECT_TYPE=$(interactive_select_project_type)
    fi
    echo "   ✅ 最终项目类型: $FINAL_PROJECT_TYPE"
    
    # 处理Owner
    if [ -n "$OWNER" ]; then
        echo "👤 使用指定的owner: $OWNER"
        FINAL_OWNER="$OWNER"
    else
        echo ""
        read -r -p "👤 请输入项目所有者 (留空则自动生成UUID): " input_owner
        if [ -n "$input_owner" ]; then
            FINAL_OWNER="$input_owner"
        else
            FINAL_OWNER=""  # 将在后面生成UUID
        fi
    fi
    
    # 生成项目ID和设置owner
    PROJECT_ID=$(generate_uuid7)
    if [ -z "$FINAL_OWNER" ]; then
        FINAL_OWNER="$PROJECT_ID"
        echo "   ℹ️ owner未提供，使用project_id: $FINAL_OWNER"
    else
        echo "   ✅ 最终owner: $FINAL_OWNER"
    fi
    
    echo "   🆔 项目ID: $PROJECT_ID"
    echo ""
    
    # 继续原有的创建流程
    continue_create_project_flow
}

# 函数定义：处理INJECT_EXISTING模式  
handle_inject_existing_mode() {
    echo "🔄 现有项目注入模式"
    echo "================================================"
    
    # 读取现有项目配置
    EXISTING_CONFIG="$TARGET_DIR/.claude/project.json"
    EXISTING_CLAUDE_MD="$TARGET_DIR/CLAUDE.md"
    
    EXISTING_PROJECT_TYPE=""
    EXISTING_OWNER=""
    EXISTING_PROJECT_ID=""
    
    # 尝试从project.json读取现有配置
    if [ -f "$EXISTING_CONFIG" ]; then
        echo "📖 读取现有配置: .claude/project.json"
        if command -v jq >/dev/null 2>&1; then
            EXISTING_PROJECT_TYPE=$(jq -r '.project_type // empty' "$EXISTING_CONFIG" 2>/dev/null)
            EXISTING_OWNER=$(jq -r '.owner // empty' "$EXISTING_CONFIG" 2>/dev/null)  
            EXISTING_PROJECT_ID=$(jq -r '.project_id // empty' "$EXISTING_CONFIG" 2>/dev/null)
        else
            # 简单的grep方式解析JSON（不完美但可用）
            EXISTING_PROJECT_TYPE=$(grep -o '"project_type"[[:space:]]*:[[:space:]]*"[^"]*"' "$EXISTING_CONFIG" 2>/dev/null | sed 's/.*"\\([^"]*\\)".*/\\1/')
            EXISTING_OWNER=$(grep -o '"owner"[[:space:]]*:[[:space:]]*"[^"]*"' "$EXISTING_CONFIG" 2>/dev/null | sed 's/.*"\\([^"]*\\)".*/\\1/')
            EXISTING_PROJECT_ID=$(grep -o '"project_id"[[:space:]]*:[[:space:]]*"[^"]*"' "$EXISTING_CONFIG" 2>/dev/null | sed 's/.*"\\([^"]*\\)".*/\\1/')
        fi
        
        [ -n "$EXISTING_PROJECT_TYPE" ] && echo "   现有项目类型: $EXISTING_PROJECT_TYPE"
        [ -n "$EXISTING_OWNER" ] && echo "   现有owner: $EXISTING_OWNER"  
        [ -n "$EXISTING_PROJECT_ID" ] && echo "   现有项目ID: $EXISTING_PROJECT_ID"
    fi
    
    # 处理项目类型
    if [ -n "$EXISTING_PROJECT_TYPE" ] && [ -n "$PROJECT_TYPE" ]; then
        echo ""
        echo "⚠️  检测到现有项目类型: $EXISTING_PROJECT_TYPE"
        echo "⚠️  参数指定项目类型: $PROJECT_TYPE"
        read -r -p "是否覆盖现有项目类型为 '$PROJECT_TYPE'？(y/N): " confirm
        if [[ "$confirm" =~ ^[Yy]$ ]]; then
            FINAL_PROJECT_TYPE="$PROJECT_TYPE"
            echo "   ✅ 项目类型已更新为: $FINAL_PROJECT_TYPE"
        else
            FINAL_PROJECT_TYPE="$EXISTING_PROJECT_TYPE"
            echo "   ✅ 保持现有项目类型: $FINAL_PROJECT_TYPE"
        fi
    elif [ -n "$EXISTING_PROJECT_TYPE" ]; then
        read -r -p "保持现有项目类型 '$EXISTING_PROJECT_TYPE'？(Y/n): " confirm
        if [[ "$confirm" =~ ^[Nn]$ ]]; then
            echo "📋 请选择新的项目类型:"
            FINAL_PROJECT_TYPE=$(interactive_select_project_type)
        else
            FINAL_PROJECT_TYPE="$EXISTING_PROJECT_TYPE"
        fi
        echo "   ✅ 最终项目类型: $FINAL_PROJECT_TYPE"
    elif [ -n "$PROJECT_TYPE" ]; then
        if validate_project_type "$PROJECT_TYPE"; then
            FINAL_PROJECT_TYPE="$PROJECT_TYPE"
            echo "   ✅ 设置项目类型: $FINAL_PROJECT_TYPE"
        else
            echo "❌ 项目类型 '$PROJECT_TYPE' 无效"
            echo "📋 请选择有效的项目类型:"
            FINAL_PROJECT_TYPE=$(interactive_select_project_type)
        fi
    else
        echo "📋 请选择项目类型:"
        FINAL_PROJECT_TYPE=$(interactive_select_project_type)
    fi
    
    # 处理Owner
    if [ -n "$EXISTING_OWNER" ] && [ -n "$OWNER" ]; then
        echo ""
        echo "⚠️  检测到现有owner: $EXISTING_OWNER"
        echo "⚠️  参数指定owner: $OWNER"
        read -r -p "是否覆盖现有owner为 '$OWNER'？(y/N): " confirm
        if [[ "$confirm" =~ ^[Yy]$ ]]; then
            FINAL_OWNER="$OWNER"
            echo "   ✅ Owner已更新为: $FINAL_OWNER"
        else
            FINAL_OWNER="$EXISTING_OWNER"
            echo "   ✅ 保持现有owner: $FINAL_OWNER"
        fi
    elif [ -n "$EXISTING_OWNER" ]; then
        read -r -p "保持现有owner '$EXISTING_OWNER'？(Y/n): " confirm
        if [[ "$confirm" =~ ^[Nn]$ ]]; then
            read -r -p "请输入新的owner: " new_owner
            FINAL_OWNER="${new_owner:-$EXISTING_OWNER}"
        else
            FINAL_OWNER="$EXISTING_OWNER"
        fi
        echo "   ✅ 最终owner: $FINAL_OWNER"
    elif [ -n "$OWNER" ]; then
        FINAL_OWNER="$OWNER"
        echo "   ✅ 设置owner: $FINAL_OWNER"
    else
        read -r -p "请输入owner (留空则自动生成): " input_owner
        FINAL_OWNER="$input_owner"
    fi
    
    # 处理项目ID（注入模式保持现有ID或生成新的）
    if [ -n "$EXISTING_PROJECT_ID" ]; then
        PROJECT_ID="$EXISTING_PROJECT_ID"
        echo "   🆔 保持现有项目ID: $PROJECT_ID"
    else
        PROJECT_ID=$(generate_uuid7)
        echo "   🆔 生成新项目ID: $PROJECT_ID"
    fi
    
    # 如果owner为空，使用project_id
    if [ -z "$FINAL_OWNER" ]; then
        FINAL_OWNER="$PROJECT_ID"
        echo "   ℹ️ owner未提供，使用project_id: $FINAL_OWNER"
    fi
    
    echo ""
    
    # 继续注入流程
    continue_inject_project_flow
}

# 函数定义：处理NON_EMPTY_NON_PROJECT模式
handle_non_empty_non_project_mode() {
    echo "⚠️  非空非项目目录"
    echo "================================================"
    
    echo "目录 '$TARGET_DIR' 非空且不是Claude项目"
    echo ""
    echo "📁 目录内容概览:"
    ls -la "$TARGET_DIR" | head -6
    if [ "$(ls -1 "$TARGET_DIR" | wc -l)" -gt 5 ]; then
        echo "... (更多文件)"
    fi
    echo ""
    
    read -r -p "⚠️  是否继续在此目录创建项目？这可能覆盖现有文件 (y/N): " confirm
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        echo "✅ 用户确认继续，转为新建项目模式"
        PROJECT_STATUS="CREATE_NEW"
        handle_create_new_mode
    else
        echo "❌ 操作已取消"
        echo "💡 建议: 请选择其他目录或清空当前目录后重试"
        exit 1
    fi
}

# 继续新建项目流程
continue_create_project_flow() {
    echo "🚀 开始创建项目..."
    
    # 设置项目变量
    PROJECT_NAME=$(basename "$TARGET_DIR")
    TECH_STACK=$(detect_tech_stack "$TARGET_DIR" "$FINAL_PROJECT_TYPE")
    
    echo "📊 项目信息汇总:"
    echo "   📂 项目名称: $PROJECT_NAME"
    echo "   🏷️ 项目类型: $FINAL_PROJECT_TYPE"
    echo "   🔧 技术栈: $TECH_STACK"
    echo "   👤 项目所有者: $FINAL_OWNER"
    echo "   🆔 项目ID: $PROJECT_ID"
    echo ""
    
    # 执行项目健康度评估
    echo "🏥 执行项目健康度评估..."
    # 新项目健康度为0
    HEALTH_PERCENTAGE=0
    echo "📊 项目健康度: $HEALTH_PERCENTAGE%"
    echo ""
    
    # 加载必要的库函数
    load_required_libraries
    
    # 执行原有的项目创建流程
    execute_project_creation
}

# 继续注入项目流程  
continue_inject_project_flow() {
    echo "🔄 开始注入配置..."
    
    # 设置项目变量
    PROJECT_NAME=$(basename "$TARGET_DIR")
    TECH_STACK=$(detect_tech_stack "$TARGET_DIR" "$FINAL_PROJECT_TYPE")
    
    echo "📊 项目信息汇总:"
    echo "   📂 项目名称: $PROJECT_NAME"
    echo "   🏷️ 项目类型: $FINAL_PROJECT_TYPE"
    echo "   🔧 技术栈: $TECH_STACK"
    echo "   👤 项目所有者: $FINAL_OWNER"
    echo "   🆔 项目ID: $PROJECT_ID"
    echo ""
    
    # 加载必要的库函数
    load_required_libraries
    
    # 执行项目健康度评估（现有项目）
    echo "🏥 执行项目健康度评估..."
    HEALTH_PERCENTAGE=$(assess_project_health "$TARGET_DIR" "$FINAL_PROJECT_TYPE" 2>&1 | tail -1)
    echo "📊 项目健康度: $HEALTH_PERCENTAGE%"
    echo ""
    
    # 执行注入更新流程
    execute_project_injection
}

# 执行项目创建流程
execute_project_creation() {
    # 创建标准项目结构
    echo "🏗️ 创建 $FINAL_PROJECT_TYPE 标准项目结构..."
    create_standard_project_structure "$TARGET_DIR" "$FINAL_PROJECT_TYPE" "$PROJECT_NAME"
    echo ""
    
    # 初始化部署策略管理
    if [ -f "$TARGET_DIR/deployments/docker-compose.smart.yml" ]; then
        echo "🚀 检测到智能部署配置，跳过传统部署策略管理器..."
    else
        echo "🚀 初始化智能部署策略..."
        init_deployment_strategy_manager "$TARGET_DIR" "$FINAL_PROJECT_TYPE" "$PROJECT_NAME"
    fi
    echo ""
    
    # 初始化国际化功能
    echo "🌍 初始化国际化功能..."
    init_internationalization_manager "$TARGET_DIR" "$FINAL_PROJECT_TYPE" "$PROJECT_NAME"
    echo ""
    
    # 创建.Claude目录结构
    echo "📁 创建Claude Code配置目录..."
    mkdir -p "$TARGET_DIR/.claude"
    
    # 生成项目配置文件
    generate_project_config
    
    # 生成轻量级CLAUDE.md
    generate_claude_md
    
    # 创建项目过程跟踪目录
    create_project_process_dirs
    
    # 创建全局基础结构
    create_global_base_structure
    
    # 验证配置
    verify_configuration
    
    # 显示完成信息
    show_completion_summary
}

# 执行项目注入流程
execute_project_injection() {
    # 注入模式：只更新配置，不破坏现有结构
    echo "🔄 更新项目配置（注入模式）..."
    
    # 备份现有配置
    if [ -f "$TARGET_DIR/.claude/project.json" ]; then
        cp "$TARGET_DIR/.claude/project.json" "$TARGET_DIR/.claude/project.json.backup.$(date +%Y%m%d_%H%M%S)"
        echo "   📋 已备份现有配置"
    fi
    
    # 创建.claude目录（如果不存在）
    mkdir -p "$TARGET_DIR/.claude"
    
    # 生成更新的项目配置文件
    generate_project_config
    
    # 更新CLAUDE.md（如果需要）
    if [ ! -f "$TARGET_DIR/CLAUDE.md" ] || [ "$TARGET_DIR/CLAUDE.md" -ot "$TARGET_DIR/.claude/project.json" ]; then
        echo "📄 更新CLAUDE.md..."
        generate_claude_md
    else
        echo "📄 CLAUDE.md已存在且较新，跳过更新"
    fi
    
    # 创建缺失的基础目录
    echo "📁 检查并创建缺失的基础目录..."
    mkdir -p "$TARGET_DIR/project_process"/{daily,reports,prps,bugfixes,analysis}
    mkdir -p "$TARGET_DIR/project_docs"
    
    # 检查命令配置
    check_command_configuration
    
    # 验证配置
    verify_configuration
    
    # 显示注入完成信息
    show_injection_summary
}

# 生成项目配置文件
generate_project_config() {
    echo "⚙️ 生成项目配置文件..."
    cat > "$TARGET_DIR/.claude/project.json" << EOF
{
  "project_id": "$PROJECT_ID",
  "project_name": "$PROJECT_NAME",
  "project_type": "$FINAL_PROJECT_TYPE",
  "tech_stack": "$TECH_STACK",
  "owner": "$FINAL_OWNER",
  "global_ce_path": "$GLOBAL_CE_PATH",
  "auto_load_context": true,
  "enabled_workflows": [
    "smart-feature-dev",
    "smart-bugfix",
    "smart-code-refactor"
  ],
  "enabled_commands": [
    "load-global-context",
    "smart-feature-dev",
    "smart-bugfix",
    "smart-code-refactor",
    "project-status-analysis",
    "cleanup-project",
    "commit-github"
  ],
  "quality_gates": {
    "lint_command": "make lint",
    "test_command": "make test",
    "typecheck_command": "make typecheck",
    "security_command": "make security-scan"
  },
  "memory_context": "${FINAL_PROJECT_TYPE}_${PROJECT_NAME}",
  "ce_version": "$SCRIPT_VERSION",
  "created_at": "$TIMESTAMP",
  "last_sync": "$TIMESTAMP"
}
EOF
    echo "   ✅ 项目配置文件: .claude/project.json"
}

# 生成轻量级CLAUDE.md
generate_claude_md() {
    echo "📄 生成轻量级CLAUDE.md..."
    
    # 检查项目类型模板是否存在
    PROJECT_TYPE_TEMPLATE="$GLOBAL_RULES_PATH/share/claude-autopilot/project-types/${FINAL_PROJECT_TYPE}.md"
    if [ -f "$PROJECT_TYPE_TEMPLATE" ]; then
        # 使用项目类型专用模板，并替换变量
        sed -e "s/\$PROJECT_NAME/$PROJECT_NAME/g" \
            -e "s/\$TECH_STACK/$TECH_STACK/g" \
            -e "s/\$SCRIPT_VERSION/$SCRIPT_VERSION/g" \
            -e "s/\$TIMESTAMP/$TIMESTAMP/g" \
            -e "s|\$GLOBAL_CE_PATH|$GLOBAL_CE_PATH|g" \
            "$PROJECT_TYPE_TEMPLATE" > "$TARGET_DIR/CLAUDE.md"
        echo "   ✅ 使用项目类型模板: ${FINAL_PROJECT_TYPE}.md"
    else
        # 生成通用模板
        echo "   ⚠️ 项目类型 '$FINAL_PROJECT_TYPE' 未在 project_types/ 中定义"
        echo "   📝 生成通用模板"
        generate_generic_claude_md
    fi
    echo "   ✅ 轻量级CLAUDE.md文件已生成"
}

# 生成通用CLAUDE.md模板
generate_generic_claude_md() {
    cat > "$TARGET_DIR/CLAUDE.md" << EOF
# CLAUDE.md - 智能AI协作指南

## 🚀 **智能Claude Autopilot 2.1 已激活**

本项目已集成智能Claude Autopilot 2.1系统，支持完整的智能开发工作流程。

### **📊 项目信息**
- **项目名称**: $PROJECT_NAME
- **项目类型**: $FINAL_PROJECT_TYPE
- **技术栈**: $TECH_STACK
- **项目所有者**: $FINAL_OWNER
- **项目ID**: $PROJECT_ID
- **CE版本**: $SCRIPT_VERSION
- **配置时间**: $TIMESTAMP

### **🎯 智能命令**

#### **核心开发流程**
\`\`\`bash
# 一键式完整功能开发 / Smart Feature Development
/智能功能开发 <功能需求描述>
# OR /smart-feature-dev <feature description>

# 智能问题诊断和修复 / Smart Bug Fix
/智能Bug修复 <问题描述>
# OR /smart-bugfix <problem description>

# 基于最佳实践的智能重构 / Smart Code Refactor
/智能代码重构 <重构目标>
# OR /smart-code-refactor <refactor target>
\`\`\`

#### **辅助工具命令**
\`\`\`bash
# 重新加载全局上下文和经验 / Load Global Context
/加载全局上下文
# OR /load-global-context

# 强制刷新模式（获取最新信息）
/加载全局上下文 --force-refresh
# OR /load-global-context --force-refresh

# 项目健康度分析 / Project Status Analysis
/项目状态分析
# OR /project-status-analysis

# 清理残余文件 / Cleanup Project
/清理残余文件
# OR /cleanup-project

# 提交到GitHub / Commit to GitHub
/提交github
# OR /commit-github
\`\`\`

### **🧠 智能能力**

#### **MCP工具链集成**
- **sequential-thinking**: 复杂任务智能分解和风险评估
- **context7**: 动态获取最新技术文档和最佳实践
- **memory**: 历史开发经验自动复用
- **puppeteer**: Web项目自动化测试验证

#### **全局规则遵守**
- **强制规则**: 自动应用安全、质量、API设计规范
- **禁止规则**: 自动检测和阻止违规操作
- **质量门**: 多层次自动验证确保代码质量

---

**Claude Autopilot路径**: $GLOBAL_CE_PATH
**项目配置**: .claude/project.json
**最后同步**: $TIMESTAMP
**CE版本**: v$SCRIPT_VERSION

*本文件由Claude Autopilot注入脚本自动生成*
EOF
}

# 创建项目过程跟踪目录
create_project_process_dirs() {
    echo "📁 创建项目过程跟踪目录..."
    mkdir -p "$TARGET_DIR/project_process"/{daily,reports,prps,bugfixes,analysis}
    
    cat > "$TARGET_DIR/project_process/README.md" << EOF
# 项目过程记录

这个目录用于智能Claude Autopilot 2.1系统自动记录开发过程。

## 目录说明
- \`daily/\` - 每日开发记录
- \`reports/\` - 完成报告和分析
- \`prps/\` - 智能PRP方案文档
- \`bugfixes/\` - Bug修复记录
- \`analysis/\` - 需求分析结果

## 自动生成
所有文件由Claude Autopilot系统自动生成，记录开发过程和经验。
EOF
    
    echo "   ✅ 项目过程目录结构已创建"
}

# 创建全局基础结构
create_global_base_structure() {
    echo "📁 创建全局基础结构..."
    
    # 创建project_docs目录
    if [ ! -d "$TARGET_DIR/project_docs" ]; then
        mkdir -p "$TARGET_DIR/project_docs"
        echo "   ✅ 创建目录: project_docs/"
    fi
    
    # 创建.vscode目录和配置
    if [ ! -d "$TARGET_DIR/.vscode" ]; then
        mkdir -p "$TARGET_DIR/.vscode"
        
        # VSCode settings.json
        cat > "$TARGET_DIR/.vscode/settings.json" << 'EOF'
{
    "editor.tabSize": 2,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
    "files.autoSave": "onFocusChange",
    "files.exclude": {
        "**/node_modules": true,
        "**/dist": true,
        "**/*.pyc": true,
        "**/__pycache__": true
    }
}
EOF
        
        echo "   ✅ 创建文件: .vscode/settings.json"
    fi
    
    # 创建.editorconfig
    if [ ! -f "$TARGET_DIR/.editorconfig" ]; then
        cat > "$TARGET_DIR/.editorconfig" << 'EOF'
root = true

[*]
charset = utf-8
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true
indent_style = space
indent_size = 2

[*.md]
trim_trailing_whitespace = false

[*.{py,go}]
indent_size = 4

[Makefile]
indent_style = tab
EOF
        
        echo "   ✅ 创建文件: .editorconfig"
    fi
    
    echo "   ✅ 全局基础结构创建完成"
}

# 检查命令配置
check_command_configuration() {
    echo "🔗 检查命令配置..."
    md_files_count=$(find "$TARGET_DIR/.claude/commands" -name "*.md" 2>/dev/null | wc -l)
    if [ "$md_files_count" -gt 0 ]; then
        echo "   ✅ Claude命令文件已复制到项目 (${md_files_count}个)"
    elif [ ! -L "$TARGET_DIR/.claude/commands" ]; then
        echo "   🔗 创建全局命令链接（回退方案）..."
        ln -sf "$GLOBAL_RULES_PATH/share/claude-autopilot/commands" "$TARGET_DIR/.claude/commands"
        echo "   ✅ 全局命令链接: .claude/commands -> $GLOBAL_RULES_PATH/share/claude-autopilot/commands"
    else
        echo "   ℹ️ 命令链接已存在"
    fi
}

# 验证配置
verify_configuration() {
    echo "✅ 验证Claude Autopilot配置..."
    
    # 检查Claude Autopilot系统
    echo "🔍 验证Claude Autopilot系统..."
    WORKFLOWS_COUNT=$(find "$GLOBAL_RULES_PATH/share/claude-autopilot/workflows" -name "*.md" 2>/dev/null | wc -l)
    COMMANDS_COUNT=$(find "$GLOBAL_RULES_PATH/share/claude-autopilot/commands" -name "*.md" 2>/dev/null | wc -l)
    TEMPLATES_COUNT=$(find "$GLOBAL_RULES_PATH/share/claude-autopilot/templates" -name "*.md" 2>/dev/null | wc -l)
    
    echo "   📋 智能工作流程: $WORKFLOWS_COUNT 个"  
    echo "   🛠️ 智能命令: $COMMANDS_COUNT 个"
    echo "   📄 智能模板: $TEMPLATES_COUNT 个"
    
    # 检查项目配置完整性
    echo "🔍 验证项目配置完整性..."
    if [ -f "$TARGET_DIR/.claude/project.json" ]; then
        echo "   ✅ 项目配置文件存在"
    else
        echo "   ❌ 项目配置文件缺失"
        exit 1
    fi
    
    if [ -f "$TARGET_DIR/CLAUDE.md" ]; then
        echo "   ✅ CLAUDE.md文件已生成"
    else
        echo "   ❌ CLAUDE.md文件生成失败"
        exit 1
    fi
}

# 显示完成摘要
show_completion_summary() {
    echo ""
    echo "🎊 Claude Autopilot 2.1 配置完成！"
    echo "================================================"
    echo ""
    show_project_summary
    show_usage_instructions
}

# 显示注入摘要
show_injection_summary() {
    echo ""
    echo "🎊 Claude Autopilot 2.1 注入完成！"
    echo "================================================"
    echo ""
    show_project_summary
    show_usage_instructions
}

# 显示项目摘要
show_project_summary() {
    echo "📊 **项目摘要**:"
    echo "   📂 项目: $PROJECT_NAME ($FINAL_PROJECT_TYPE)"
    echo "   👤 所有者: $FINAL_OWNER"
    echo "   🆔 项目ID: $PROJECT_ID"
    echo "   🔧 技术栈: $TECH_STACK"
    echo "   🏥 健康度: $HEALTH_PERCENTAGE%"
    echo "   ⚙️ 配置文件: .claude/project.json"
    echo "   📄 指南文件: CLAUDE.md"
    echo "   📁 过程目录: project_process/"
    echo ""
}

# 显示使用说明
show_usage_instructions() {
    echo "🚀 **可用的智能命令 / Available Smart Commands**:"
    echo "   • /智能功能开发 <功能描述>        OR  /smart-feature-dev <feature description>"
    echo "   • /智能Bug修复 <问题描述>         OR  /smart-bugfix <problem description>"
    echo "   • /智能代码重构 <重构目标>       OR  /smart-code-refactor <refactor target>"
    echo "   • /加载全局上下文               OR  /load-global-context"
    echo "   • /项目状态分析                OR  /project-status-analysis"
    echo "   • /清理残余文件                OR  /cleanup-project"
    echo "   • /提交github                  OR  /commit-github"
    echo ""
    echo "💡 **开始使用**:"
    echo "   1. 进入项目目录: cd $TARGET_DIR"
    echo "   2. 启动Claude Code: claude code"
    echo "   3. 直接描述需求开始智能开发！"
    echo ""
    echo "📚 **获取帮助**:"
    echo "   - 全局文档: $GLOBAL_CE_PATH/README.md"
    echo "   - 项目指南: CLAUDE.md"
    echo ""
    echo "✨ **享受智能开发体验！**"
}

# 执行主要的状态处理逻辑
case "$PROJECT_STATUS" in
    "CREATE_NEW")
        handle_create_new_mode
        ;;
    "INJECT_EXISTING") 
        handle_inject_existing_mode
        ;;
    "NON_EMPTY_NON_PROJECT")
        handle_non_empty_non_project_mode
        ;;
    *)
        echo "❌ 未知的项目状态: $PROJECT_STATUS"
        exit 1
        ;;
esac

# 脚本执行完成
echo ""
echo "🎉 脚本执行完成！"

# 确保当前脚本有执行权限
chmod +x "$0"
