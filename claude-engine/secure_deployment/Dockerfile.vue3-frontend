# 零源码泄露的多阶段Dockerfile - Vue3前端
# 构建阶段 - 包含源码，不会进入最终镜像
FROM node:18-alpine AS builder

# 安装必要的构建工具
RUN apk add --no-cache git

# 设置工作目录
WORKDIR /build

# 只复制package.json和package-lock.json，利用Docker缓存
COPY package*.json ./
RUN npm ci --only=production

# 复制源码进行构建
COPY . .

# 构建生产版本
RUN npm run build

# 运行阶段 - 使用Nginx提供静态文件服务
FROM nginx:alpine

# 复制Nginx配置
COPY --from=builder /build/nginx.conf /etc/nginx/nginx.conf 2>/dev/null || echo "events { worker_connections 1024; } http { include /etc/nginx/mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; server { listen 80; server_name localhost; location / { root /usr/share/nginx/html; index index.html index.htm; try_files \$uri \$uri/ /index.html; } error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } } }" > /etc/nginx/nginx.conf

# 只复制构建产物
COPY --from=builder /build/dist /usr/share/nginx/html

# 环境变量配置（可通过docker run -e 覆盖）
ENV HOST=0.0.0.0
ENV PORT=80

# 动态暴露端口（通过环境变量）
EXPOSE $PORT

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:$PORT/ || exit 1

# 启动Nginx
CMD ["nginx", "-g", "daemon off;"]